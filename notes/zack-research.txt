02/20/2019 - zack

-constant_pool_count
The value of the constant_pool_count item is equal to the number of entries
in the constant_pool table plus one. A constant_pool index is considered valid
if it is greater than zero and less than constant_pool_count, with the exception
for constants of type long and double noted in.

-constant_pool[]
The constant_pool is a table of structures representing various string
constants, class and interface names, field names, and other constants that
are referred to within the ClassFile structure and its substructures.
The format of each constant_pool table entry is indicated by its first "tag" byte.

-A field descriptor represents the type of a class, instance, or local variable.
In Demo 3 we are searching for Base Type I.

FieldDescriptor:
FieldType

FieldType:
BaseType
ObjectType
ArrayType

BaseType:
B C D F I (int/integer) J S Z

-The field descriptor of an instance variable of type int is simply I.

CONSTANT_Integer_info {
    u1 tag;
    u4 bytes;
}

Tag: 3
Add. bytes: 4 bytes
Dec. of Cosnt: Integer, a signed 32-bit two's complement number in big-endian format

-Java ByteCode Instructions
https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings

iconst_0          // Push int constant 0.
istore_0          // Pop to local variable 0, which is imByte: byte imByte = 0;
bipush 125        // Expand byte constant 125 to int and push.
istore_1          // Pop to local variable 1, which is imInt: int imInt = 125;
iinc 1 1          // Increment local variable 1 (imInt) by 1: ++imInt;
iload_1           // Push local variable 1 (imInt).
int2byte          // Truncate and sign extend top of stack so it has valid byte value.
istore_0          // Pop to local variable 0 (imByte): imByte = (byte) imInt;
iload_1           // Push local variable 1 (imInt) again.
iconst_m1         // Push integer -1.
imul              // Pop top two ints, multiply, push result.
istore_1          // Pop result of multiply to local variable 1 (imInt): imInt *= -1;
iload_1           // Push local variable 1 (imInt).
int2byte          // Truncate and sign extend top of stack so it has valid byte value.
istore_0          // Pop to local variable 0 (imByte): imByte = (byte) imInt;
iload_1           // Push local variable 1 (imInt) again.
iconst_m1         // Push integer -1.
imul              // Pop top two ints, multiply, push result.
istore_1          // Pop result of multiply to local variable 1 (imInt): imInt *= -1;
goto 5            // Jump back to the iinc instruction: while (true) {}

-Further reading:
https://www.artima.com/underthehood/bytecodeP.html

02/21/2019 - zack

-STACKS
http://pages.cs.wisc.edu/~fischer/cs536.f13/jvm.html

The Java Virtual Machine specification permits Java stacks to be of either a
fixed or a dynamically varying size. If the Java stacks are of a fixed size,
the size of each Java stack may be chosen independently when that stack is
created. A Java Virtual Machine implementation may provide the programmer or
the user control over the initial size of Java stacks, as well as, in the case
of dynamically expanding or contracting Java stacks, control over the maximum
and minimum Java stack sizes.

The following exceptional conditions are associated with Java stacks:

If the computation in a thread requires a larger Java stack than is permitted,
the Java Virtual Machine throws a StackOverflowError.
If Java stacks can be dynamically expanded, and Java stack expansion is
attempted but insufficient memory can be made available to effect the expansion,
or if insufficient memory can be made available to create the initial Java
stack for a new thread, the Java Virtual Machine throws an OutOfMemory-Error.

A number of instructions are provided for the direct manipulation of the
operand stack: pop, pop2, dup, dup2, dup_x1, dup2_x1, dup_x2, dup2_x2, swap.

-ARITHMETIC INSTRUCTIONS

The arithmetic instructions compute a result that is typically a function of
two values on the operand stack, pushing the result back on the operand stack.
There are two main kinds of arithmetic instructions, those operating on integer
values and those operating on floating-point values. Within each of these kinds,
the arithmetic instructions are specialized to Java Virtual Machine numeric
types. There is no direct support for integer arithmetic on byte, short, and
char types (ยง3.11.1); those operations are handled by instructions operating
on type int. Integer and floating-point instructions also differ in their
behavior on overflow, underflow, and divide-by-zero. The arithmetic instructions
are as follows:

Add: iadd, ladd, fadd, dadd.
Subtract: isub, lsub, fsub, dsub.
Multiply: imul, lmul, fmul, dmul.
Divide: idiv, ldiv, fdiv, ddiv.
Remainder: irem, lrem, frem, drem.
Negate: ineg, lneg, fneg, dneg.
Shift: ishl, ishr, iushr, lshl, lshr, lushr.
Bitwise OR: ior, lor.
Bitwise AND: iand, land.
Bitwise exclusive OR: ixor, lxor.
Local variable increment: iinc.

The semantics of the Java operators on integer and floating-point values are
directly supported by the semantics of the Java Virtual Machine instruction set.
The Java Virtual Machine does not indicate overflow or underflow during
operations on integer data types. The only integer operations that can throw an
exception are the integer divide instructions (idiv and ldiv) and the integer
remainder instructions (irem and lrem), which throw an ArithmeticException if
the divisor is zero.

Java Virtual Machine operations on floating-point numbers behave exactly as
specified in IEEE 754. In particular, the Java Virtual Machine requires full
support of IEEE 754 denormalized floating-point numbers and gradual underflow,
which make it easier to prove desirable properties of particular numerical algorithms.

The Java Virtual Machine requires that floating-point arithmetic behave as if
every floating-point operator rounded its floating-point result to the result
precision. Inexact results must be rounded to the representable value nearest
to the infinitely precise result; if the two nearest representable values are
equally near, the one with its least significant bit zero is chosen. This is
the IEEE 754 standard's default rounding mode, known as round-to-nearest.

The Java Virtual Machine uses round-towards-zero when converting a floatingpoint
value to an integer. This results in the number being truncated; any bits of the
significand that represent the fractional part of the operand value are
discarded. Round-towards-zero chooses as its result the type's value closest to,
but no greater in magnitude than, the infinitely precise result.

The Java Virtual Machine's floating-point operators produce no exceptions.
An operation that overflows produces a signed infinity, an operation that
underflows produces a signed zero, and an operation that has no mathematically
definite result produces NaN. All numeric operations with NaN as an operand
produce NaN as a result.

02/25/2019

-Dictionaries allow us to work with "key value pairs". Where a Key is a value data
that is linked to the definition. When calling the dictionary, you pass in the key
that is searched and when found returns the value associated with the key. Keys
and definitions can be any variable type. A keys that is not found returns a no
key found error. Calling a .get method on a key that does not exist returns a
none. Or a default value can be specified for keys that don't exist. Dictionaries
can be updated with new assignments, or update methods. Benefits of using update
method; you can update multiple Keys in one call (includes adding new keys).

02/26/2019

-Unittesting
https://www.youtube.com/watch?v=hvPYuqzTPIk&t=1732s

-Unittests exercise small amounts of code.
-Nothing outside of the code has to work to test that code.
-Coverage: how much of the code is covered (tested) by unittests.
-Unittests are fast and simple, by testing locally in a very small scope.
-Create local wrappers!
-Searches for duplicate code.
-Unittests can be used as documentation.

02/26/2019 (in class)

-TDD (test driver development)
  -write the test first
  -make sure it fails
  -write enough code to make it pass
-SE (software engineering) focuses on req. design and processes
-Design Patters:
  -creational patterns
  -structural patterns
  -behavioral patterns
    -how does any one class behaves
-Object Oriented Programming
  -Encapsulation (private - data hiding)
  -Abstraction (don't need to know what is inside the method)
  -Inheritance (inherit objects from other classes)
  -Polymorphism (methods working on multiple types)

02/27/2019

https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown

-There are 12 methods in the Unittest module you can use to test code.
-The purpose of Unittesting is to give a method (normally) an input and the
compare the return result with an expected variable that is provided. If ever
a method is broken the return result will not satisfy the test and will fail.
Allowing the programmer to easily find the source of a problem.
-Unittests should be written before the operation code.
-This way you can figure out what you want that method to do, give it an input
and write code that will make the Unittest pass. Insuring the code is working
properly.
-Short comings of Unittesting is that they are only as good as the programmer
makes them. There is hundreds of ways to test a method and there is hundreds
of ways the method can fail. Example: a method that subtracts 2 ints, receives
a string as an input. If you do not write a Unittest for this case it does no
good having the Unittest in that bug scenario.

03/01/2019

https://www.youtube.com/watch?v=CqvZ3vGoGs0&t=836s
https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure

03/03/2019

-Working on the presentation slides.

03/04/2019 Presentation commands.

coverage run --omit=jvpm/__init__.py,jvpm/test/__init__.py,jvpm/test/test_jvpm.py -m unittest

coverage report -m

04/01/2019

https://realpython.com/python-modules-packages/

-an __init__.py file initiated a folder as a package
-can initialize imports in the init.py file, when you import the package name
it will import the initialized modules
-packages allow for a hierarchical structuring of the module namespace using
dot notation.
-modules in python are simple files with .py extension that have executible
python code in it. When modules are imported, can use the classes and variables
in the .py file.
-in many cases modules hold functions that are used by the program, this is
significant because program can refer to the module at different points without
having replicated code every-time that function is needed.

04/02/2019

https://docs.python-guide.org/writing/structure/

-structure of a python program

-API design is essential for a healthy development cycle.
-what functions should go into which modules?
-how data flows through the project?

-import from the same folder with from .(module name) import (classname)

04/05/2019

-dictionaries

https://www.youtube.com/watch?v=ZEZdys-fHDw

04/17/2019

The standard defines:

-arithmetic formats: sets of binary and decimal floating-point data, which consist
of finite numbers (including signed zeros and subnormal numbers), infinities, and
special "not a number" values (NaNs)
interchange formats: encodings (bit strings) that may be used to exchange
floating-point data in an efficient and compact form
-rounding rules: properties to be satisfied when rounding numbers during arithmetic
and conversions
-operations: arithmetic and other operations (such as trigonometric functions) on
arithmetic formats
-exception handling: indications of exceptional conditions (such as division by
zero, overflow, etc.)

IEEE is a format of representing floating point variables and arithmetic implementations.
-In binary, the number 10100.110 could be represented as 1.0100110 ร 24.
S=Sign, E=Exponent, F=Fraction
-Single Precision: SEEEEEEE EFFFFFFF FFFFFFFF FFFFFFFF

Sign is 0 for positive number and 1 for negative numbers

Exponent represents positive and negative numbers. A bias is in place (127) to the
actual exponent, an exponent of 50 will be 177 (177-127=50).

Mantissa is assumed to be 1, making it 1.f, where f is the field of fraction bits.
